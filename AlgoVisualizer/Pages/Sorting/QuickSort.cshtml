@page

@{
    ViewData["Title"] = "Quick Sort";
}

<div class="container d-flex flex-column align-items-start">
    <div class="row" role="group">
        <div class="btn-group col-auto">
            <button id="sort" class="btn btn-primary"><i class="bi bi-play-fill"></i></button>
            <button id="stop" class="btn btn-secondary mx-1"><i class="bi bi-pause-fill"></i></button>
            
            <button id="back" class="btn btn-primary"><i class="bi bi-rewind"></i></button>
            <button id="forward" class="btn btn-primary mx-1"><i class="bi bi-fast-forward"></i></button>
            
            <button id="shuffle" class="btn btn-success"><i class="bi bi-shuffle"></i></button>
        </div>
        <div class="px-1 col-auto">
            <label for="delayRange">Delay (ms): <span id="delayValue">250</span></label>
            <input type="range" class="form-range" id="delayRange" min="100" max="1000" step="50" value="250">
        </div>
        <div class="px-5 mx-3 col-auto">
            <button id="theoryButton" class="btn btn-outline-dark btn-lg">Theory</button>
        </div>
    </div>
    
    <div class="row pt-3" role="group">
        <canvas id="visualizationCanvas" width="521" height="520" class="col-auto"></canvas>
        <div class="col-auto">
            <div class="btn-group mb-2" role="group">
                <button id="showCSharp" class="btn btn-info">C#</button>
                <button id="showJS" class="btn btn-info mx-1">JS</button>
                <button id="showPython" class="btn btn-info">Python</button>
            </div>
            <pre id="codeBox" class="line-numbers fixed-height"></pre>
        </div>
    </div>
</div>

<div id="theoryModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>QuickSort Algorithm</h2>
        Quicksort is a popular sorting algorithm that works by picking a 'pivot' element from the array and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The process is then repeated recursively for each sub-array.<br/>
        Here’s how it works step-by-step:<br/>
        1. Choose a Pivot: Pick an element from the array as the pivot. Different strategies exist for choosing the pivot, like picking the first element, the last element, or a random element.<br/>
        2. Partitioning: Rearrange the array so that all elements with values less than the pivot come before it, and all elements with values greater than the pivot come after it. After partitioning, the pivot is in its final position.<br/>
        3. Recursively Apply: Apply the above steps recursively to the sub-arrays of elements with smaller and greater values.<br/>
        4. Base Case: The base case of the recursion is arrays of size zero or one, which are already sorted.<br/>
        5. Combine: Eventually, the smaller sorted arrays are combined to create a fully sorted array.
        <img src="~/images/sorting/quicksort.jpg" alt="QuickSort Visualization" style="width:100%;height:auto;">
    </div>
</div>

<script>
document.getElementById('theoryButton').onclick = function() {
    document.getElementById('theoryModal').style.display = "block";
}

document.querySelector('.modal .close').onclick = function() {
    document.getElementById('theoryModal').style.display = "none";
}

window.onclick = function(event) {
    if (event.target == document.getElementById('theoryModal')) {
        document.getElementById('theoryModal').style.display = "none";
    }
}
</script>

<script type="module" src="~/js/sorting/QuickSort.js"></script>
